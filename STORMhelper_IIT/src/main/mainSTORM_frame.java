/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import mmcorej.CMMCore;
import mmcorej.DeviceType;
import org.micromanager.Studio;
import org.micromanager.acquisition.SequenceSettings;
import java.util.logging.Level;
import java.util.logging.Logger;
import static main.twoColSTORM.gui_;
import mmcorej.Configuration;
import mmcorej.PropertySetting;
import mmcorej.StrVector;
import org.micromanager.acquisition.ChannelSpec;
/**
 *
 * @author STORM
 */
public class mainSTORM_frame extends javax.swing.JFrame {
    static mainSTORM_frame frame_;          
    public static Studio gui_ = null;
    private static CMMCore core_ = null;
    public static Thread runAcquThread; 
    public Thread runAutofocusThread; 
    public Thread t1; 
    public Thread t2;
    public static Thread afRun;
    public static Thread hcaSTORM_;
    public static Thread satya2colThread;
    SequenceSettings acqSet;
    public AFclass af_;
    public twoColSTORM tcs_;
//    public jserialcomm jserial_;
    public AFlogic aflog_;
    public diagram dia_;
    int frames;
    int afIt = 100;
    int loopCount;
    int chCount = 1;
   
    double afFoc = 0;
    double realFoc = 0;
    ArrayList<Double> calibList;
    String[] ar = new String[5];
    
    /**
     * Creates new form mainSTORM_frame
     */

    mainSTORM_frame(Studio gui_ref) {
        frame_ = this;  
        gui_ = gui_ref;
        core_ = gui_.getCMMCore();
        afRun = new Thread(new afRunnable(this));
        hcaSTORM_ = new Thread(new hcaSTORM(this));
        satya2colThread = new Thread(new satyaThread(this));
        initComponents();
        af_ = new AFclass();
        tcs_ = new twoColSTORM(this);
//        jserial_ = new jserialcomm();
        aflog_ = new AFlogic();
        af_.set_parent(frame_);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        afHCAstormButton = new javax.swing.JButton();
        activationTime_label = new javax.swing.JLabel();
        afPathText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        hcaSTORMbutton = new javax.swing.JButton();
        autofocusTest_button = new javax.swing.JButton();
        FredTestButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        afDefineButton = new javax.swing.JButton();
        afGoToButton = new javax.swing.JButton();
        afCalibButton = new javax.swing.JButton();
        afARButton = new javax.swing.JButton();
        zRangeField = new javax.swing.JTextField();
        zIncField = new javax.swing.JTextField();
        lowerLimField = new javax.swing.JTextField();
        upperLimField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        saveCalibButton = new javax.swing.JButton();
        initSerialbutton = new javax.swing.JButton();
        repCalibButton = new javax.swing.JButton();
        repCalibField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        waitRepField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        hcaAFbutton = new javax.swing.JButton();
        hcaAFfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        repZstackButton = new javax.swing.JButton();
        repZstackField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        afOnCheckBox = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        satyaStart = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        frameNumberField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        savePathField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        expFolderField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        afHCAstormButton.setText("HCA STORM + AF");
        afHCAstormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afHCAstormButtonActionPerformed(evt);
            }
        });

        activationTime_label.setText("Excitation power defined in configuration group ");

        afPathText.setText("C:\\\\Program Files\\\\Micro-Manager-2.0beta\\\\zPosSTORM.txt");
        afPathText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afPathTextActionPerformed(evt);
            }
        });

        jLabel1.setText("af file path");

        hcaSTORMbutton.setText("HCA STORM");
        hcaSTORMbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hcaSTORMbuttonActionPerformed(evt);
            }
        });

        autofocusTest_button.setText("test Jonathan");
        autofocusTest_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autofocusTest_buttonActionPerformed(evt);
            }
        });

        FredTestButton.setText("test Fred");
        FredTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FredTestButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("STORM:");

        jLabel5.setText("autofocus:");

        afDefineButton.setText("define focus");
        afDefineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afDefineButtonActionPerformed(evt);
            }
        });

        afGoToButton.setText("go to focus");
        afGoToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afGoToButtonActionPerformed(evt);
            }
        });

        afCalibButton.setText("calibration");
        afCalibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afCalibButtonActionPerformed(evt);
            }
        });

        afARButton.setText("attach runnable");

        zRangeField.setText("250");
        zRangeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zRangeFieldActionPerformed(evt);
            }
        });

        zIncField.setText("10");
        zIncField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zIncFieldActionPerformed(evt);
            }
        });

        lowerLimField.setText("-530");
        lowerLimField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerLimFieldActionPerformed(evt);
            }
        });

        upperLimField.setText("725");
        upperLimField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperLimFieldActionPerformed(evt);
            }
        });

        jLabel6.setText("af z range [nm]");

        jLabel7.setText("af z increments [nm]");

        jLabel8.setText("upper lim");

        jLabel9.setText("lower lim");

        jButton3.setText("init socket");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("sent mess");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        saveCalibButton.setText("save calib");
        saveCalibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCalibButtonActionPerformed(evt);
            }
        });

        initSerialbutton.setText("init serial");
        initSerialbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initSerialbuttonActionPerformed(evt);
            }
        });

        repCalibButton.setText("rep calib");
        repCalibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repCalibButtonActionPerformed(evt);
            }
        });

        repCalibField.setText("5");
        repCalibField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repCalibFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("repetitions");

        waitRepField.setText("0");
        waitRepField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitRepFieldActionPerformed(evt);
            }
        });

        jLabel11.setText("wait between rep");

        hcaAFbutton.setText("HCA AF");
        hcaAFbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hcaAFbuttonActionPerformed(evt);
            }
        });

        hcaAFfield.setText("1000");

        jLabel2.setText("'activationPower' and 'activationTime' define as dummy device names ");

        jLabel3.setText("use for example DemoCamera -> DHub -> D-DA and D-DA2");

        repZstackButton.setText("rep z-stack");
        repZstackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repZstackButtonActionPerformed(evt);
            }
        });

        repZstackField.setText("10");

        jLabel12.setText("repetitions");

        afOnCheckBox.setText("AF on in HCA");
        afOnCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afOnCheckBoxActionPerformed(evt);
            }
        });

        jLabel13.setText("IIT Guwahati 2 color STORM");

        satyaStart.setText("Go");
        satyaStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                satyaStartActionPerformed(evt);
            }
        });

        frameNumberField.setText("20");
        frameNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frameNumberFieldActionPerformed(evt);
            }
        });

        jLabel14.setText("Frame number");

        savePathField.setText("D:\\STORM");
        savePathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePathFieldActionPerformed(evt);
            }
        });

        jLabel15.setText("SavePath");

        expFolderField.setText("exp1");

        jLabel16.setText("experiment folder");

        jLabel17.setText("Presets activation via 'AutoShutter' set to 0 (inactive) and 1 (active)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(satyaStart)
                        .addGap(30, 30, 30)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(activationTime_label)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FredTestButton)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(initSerialbutton)
                            .addComponent(autofocusTest_button, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(afHCAstormButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hcaSTORMbutton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hcaAFbutton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hcaAFfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(afOnCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(afPathText, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(193, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saveCalibButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(afCalibButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(afDefineButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(afGoToButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(afARButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(repZstackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(repZstackField, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(repCalibButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(waitRepField, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                            .addComponent(repCalibField))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(zRangeField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(zIncField)
                            .addComponent(upperLimField)
                            .addComponent(lowerLimField))
                        .addGap(67, 67, 67))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(frameNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(savePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(expFolderField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(FredTestButton))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(autofocusTest_button)
                    .addComponent(activationTime_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(1, 1, 1)
                        .addComponent(jButton4)
                        .addGap(3, 3, 3)
                        .addComponent(initSerialbutton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afHCAstormButton)
                    .addComponent(hcaSTORMbutton)
                    .addComponent(hcaAFbutton)
                    .addComponent(hcaAFfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(afOnCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frameNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expFolderField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(9, 9, 9)
                .addComponent(satyaStart)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(afPathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afCalibButton)
                    .addComponent(zRangeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(repCalibButton)
                    .addComponent(repCalibField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(afDefineButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zIncField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(waitRepField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afGoToButton)
                    .addComponent(upperLimField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(repZstackButton)
                    .addComponent(repZstackField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(afARButton)
                        .addComponent(lowerLimField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveCalibButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String[][] getMultiColSTORMdata(){
        try {
            gui_.acquisitions().clearRunnables();
            acqSet = gui_.acquisitions().getAcquisitionSettings();
            ArrayList<ChannelSpec> channels = acqSet.channels;
            int s = channels.size();
            String[][] resArr = new String[s][7];
            for (int i=0; i<=s-1; i++){
                ChannelSpec ch1 = channels.get(i);
                String chh1 = ch1.config;
                String group = core_.getChannelGroup();
                Configuration configData = core_.getConfigData(group, chh1);
                long si = configData.size();
                double roundOff = Math.round(((double) i+1.0)/(double) s * 100.0) / 100.0;
                resArr[i][0] = String.valueOf(s);
                resArr[i][1] = String.valueOf(roundOff);
                for(int ii=0; ii<=si-1; ii++){
                    PropertySetting setting = configData.getSetting(ii);
                    String propertyValue = setting.getPropertyValue();
                    String propertyName = setting.getPropertyName();
                    String deviceName = setting.getDeviceLabel();
                    //System.out.println(deviceName+" "+propertyName+" "+propertyValue+" -> ??? STORM");
                    if("activationTime".equals(deviceName)){
                        resArr[i][2] = propertyValue;
                    } else if("activationPower".equals(deviceName)){
                        resArr[i][3] = propertyValue;
                    }else if(deviceName.contains("aser")){
                        if(Double.parseDouble(propertyValue)!=0){
                            resArr[i][4] = propertyValue;
                            resArr[i][5] = deviceName;
                            resArr[i][6] = propertyName;
                            //System.out.println("do STORM");
                        } else {
                            //System.out.println("no STORM");
                        }
                    }else{
                        System.out.println("maybe: Could not find device name 'activationTime'"+deviceName+" "+propertyName+" "+propertyValue);
                        System.out.println("or maybe: Could not find device name 'activationPower'"+deviceName+" "+propertyName+" "+propertyValue);
                        break;
                    }
                }  
            }
            return resArr;
        } catch (Exception ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }        
    }
    
    public void multiColSTORM(){
        String[] arr = new String[5];
        try {
            gui_.acquisitions().clearRunnables();
            acqSet = gui_.acquisitions().getAcquisitionSettings();
            ArrayList<ChannelSpec> channels = acqSet.channels;
            int s = channels.size();
            
            for (int i=0; i<=s-1; i++){
                ChannelSpec ch1 = channels.get(i);
                String chh1 = ch1.config;
                boolean use = ch1.useChannel;
                int actTime = 0;
                double actPo = 0;
                String group = core_.getChannelGroup();
                Configuration configData = core_.getConfigData(group, chh1);
                long si = configData.size();
                System.out.println("i: "+i+"  ch: "+chh1+"  use: "+use);
            }
        } catch (Exception ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }  
        chCount = chCount + 1;
    }
    
    private String[] getSTORMpara(){
        String[] arr = new String[5];
        try {
            gui_.acquisitions().clearRunnables();
            acqSet = gui_.acquisitions().getAcquisitionSettings();
            ArrayList<ChannelSpec> channels = acqSet.channels;
            int s = channels.size();
            for (int i=0; i<=s-1; i++){
                ChannelSpec ch1 = channels.get(i);
                String chh1 = ch1.config;
                int actTime = 0;
                double actPo = 0;
                String group = core_.getChannelGroup();
                Configuration configData = core_.getConfigData(group, chh1);
                long si = configData.size();
                for(int ii=0; ii<=si-1; ii++){
                    PropertySetting setting = configData.getSetting(ii);
                    String propertyValue = setting.getPropertyValue();
                    String propertyName = setting.getPropertyName();
                    String deviceName = setting.getDeviceLabel();
                    System.out.println(deviceName+" "+propertyName+" "+propertyValue+" -> do STORM");
                    if("activationTime".equals(deviceName)){
                        arr[2] = propertyValue;
                        arr[3] = deviceName;
                        arr[4] = propertyName;
                    } else if("activationPower".equals(deviceName)){
                        arr[0] = propertyValue;
                    }else if(deviceName.contains("aser")){
                        if(Double.parseDouble(propertyValue)!=0){
                            arr[1] = propertyValue;
                        } else {
                            System.out.println("Don't STORM it: "+deviceName+" "+propertyName+" "+propertyValue);
                        }
                        //stormIt2(arr);
                        //setLaserOff(arr);
                    }else{
                        System.out.println("maybe: Could not find device name 'activationTime'"+deviceName+" "+propertyName+" "+propertyValue);
                        System.out.println("or maybe: Could not find device name 'activationPower'"+deviceName+" "+propertyName+" "+propertyValue);
                        break;
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }    
        return arr;
    }
    
    private void afHCAstormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afHCAstormButtonActionPerformed
        System.out.println("start HCA STORM");

        // clear runnables (get rid of previouse attached functionality)
        gui_.acquisitions().clearRunnables();
        // creates new thread for mulit dimensional acquisition (MDA)
        runAcquThread = new Thread(new runAcquThread(this));
        // gets MDA settings
        acqSet = gui_.acquisitions().getAcquisitionSettings();
        // sets counter for colors 
        chCount = 1;
        // attaches STROM functionality
        //(int frame, int position, int channel, int slice, java.lang.Runnable runnable)
        gui_.acquisitions().attachRunnable(0, -1, 0, 0, hcaSTORM_);
        // starts MDA thread
        runAcquThread.start();
        //checks if thread is still running
        while(runAcquThread.isAlive()){}
        System.out.println("end HCA STORM");
        //sets lasers off
        setAllLasersOff(getMultiColSTORMdata());
    }//GEN-LAST:event_afHCAstormButtonActionPerformed
    
    public void stormIt2(String[] arr){
        double aP = Double.parseDouble(arr[0]);
        double eP = Double.parseDouble(arr[1]);
        long aT = (long) Double.parseDouble(arr[2]);
        String laserN = arr[3];
        String propN = arr[4];
        try {
            core_.waitForDeviceType(DeviceType.XYStageDevice);
            //gui_.shutter().setShutter(false);
            core_.setProperty(laserN, propN, aP);
            TimeUnit.SECONDS.sleep(aT);
            core_.setProperty(laserN, propN, eP);
        } catch (Exception ex) {
            System.out.println("find meeeee2");
            //Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void stormIt2col(String[][] arr){
        int ch = 0;
        double val = Math.round(((double) chCount/ Double.parseDouble(arr[0][0]) * 100)/100);
        double valRound = Math.round(val);
        double newVal = val-valRound;
        for(int i=0; i<Double.parseDouble(arr[0][0])-1; i++){
            if(Double.parseDouble(arr[i][1])==newVal){
                ch=i;
            }
        }
        double aP = Double.parseDouble(arr[ch][3]);
        double eP = Double.parseDouble(arr[ch][4]);
        long aT = (long) Double.parseDouble(arr[ch][2]);
        String laserN = arr[ch][5];
        String propN = arr[ch][6];
        System.out.println("Laser name: " + laserN + " property name: " + propN + " excPow: " + eP + " actPow: " + aP + " actTimePow: " + aT + " ch: " + ch);
        try {
            System.out.println("Set: "+ laserN + " " + propN + " to " + aP);
            core_.setProperty(laserN, propN, aP);
            System.out.println("sleep for "+  aT);
            TimeUnit.SECONDS.sleep(aT);
            System.out.println("Set: "+ laserN + " " + propN + " to " + eP);
            core_.setProperty(laserN, propN, eP);
        } catch (Exception ex) {
            System.out.println("find meeeee2");
            //Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        chCount = chCount + 1;
    }
    
    public void setAllLasersOff(String[][] arr){
        double p = 0;
        String laserN = null;
        String propN = null;
        for(int i=0; i<Double.parseDouble(arr[0][0])-1; i++){
            laserN = arr[i][5];
            propN = arr[i][6];
            try {
                core_.setProperty(laserN, propN, p);
            } catch (Exception ex) {
                Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
     }
    
    public void setLaserOff(String[] arr){
        double aP = 0;
        double eP = 0;
        long aT = (long) 0;
        String laserN = arr[3];
        String propN = arr[4];
        try {
            core_.waitForDeviceType(DeviceType.XYStageDevice);
            //gui_.shutter().setShutter(false);
//            core_.setProperty(laserN, propN, aP);
//            TimeUnit.SECONDS.sleep(aT);
            core_.setProperty(laserN, propN, eP);
        } catch (Exception ex) {
            System.out.println("find meeeee2");
            //Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void afPathTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afPathTextActionPerformed
        af_.changeAFpath(afPathText.getText());
    }//GEN-LAST:event_afPathTextActionPerformed

    private void hcaSTORMbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hcaSTORMbuttonActionPerformed
        System.out.println("start HCA STORM");
        gui_.acquisitions().clearRunnables();
        gui_.live().setLiveMode(true);
        ar = getSTORMpara();
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        runAcquThread = new Thread(new runAcquThread(this));
        gui_.acquisitions().attachRunnable(0, -1, 0, 0, hcaSTORM_);
        runAcquThread.start();
        System.out.println("end HCA STORM");
        
    }//GEN-LAST:event_hcaSTORMbuttonActionPerformed

    public static void startSatya(){
        System.out.println("Thread Satya successful");
    }
 
    public String[][] satyaGetSetings() {
        
        String groupName = core_.getChannelGroup();
        System.out.println("Channel groupe: " + groupName);
        StrVector presetList = core_.getAvailableConfigs(groupName);
        String currPreset = presetList.get(0);
        Configuration configData;
        try {
            configData = core_.getConfigData(groupName, currPreset);
        } catch (Exception ex) {
            configData = null;
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int s = (int) configData.size();
        String[][] arr = new String[s][8];
        
        for (int i=0; i<presetList.size(); i++){
            try {
                currPreset = presetList.get(i);
                System.out.println("Configuration " + presetList.get(i));
                configData = core_.getConfigData(groupName, currPreset);
                String dName = "null";
                String pName = "null";
                String pValue = "null";
                for (int ii=0; ii<=s-1; ii++){
                    PropertySetting set = configData.getSetting(ii);
                    dName = set.getDeviceLabel();
                    pName = set.getPropertyName();
                    pValue = set.getPropertyValue();
                    System.out.println("device name: " + dName);
                    System.out.println("property name: " + pName);
                    System.out.println("property value: " + pValue);
                
                    arr[i][0] = groupName;
                    arr[i][1] = currPreset;
                    if("activationTime".equals(dName)){
                            arr[i][2] = pValue;
                        }else if("activationPower".equals(dName)){
                            arr[i][3] = pValue;
                        }else if("Core".equals(dName)){
                            arr[i][7] = pValue;
                        }else{
                            if(Double.parseDouble(pValue)!=0){
                                arr[i][4] = pValue;
                                arr[i][5] = dName;
                                arr[i][6] = pName;
                            }
                        }
                }
                
            } catch (Exception ex) {
                
                Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
            }      
        }
        return arr;
        /*try {
            //Configuration configData = core_.getConfigGroupState("STORM");
            Configuration configData = core_.getConfigData("STORM", "STORM 462");
            System.out.println("STORM data 462");
            long s = configData.size();
            for (int i=0; i<=s-1; i++){
                PropertySetting set = configData.getSetting(i);
                String pName = set.getPropertyName();
                String pValue = set.getPropertyValue();
                System.out.println("property name: " + pName);
                System.out.println("property value: " + pValue);
            }
            configData = core_.getConfigData("STORM", "STORM 405");
            System.out.println("STORM data 405");
            s = configData.size();
            for (int i=0; i<=s-1; i++){
                PropertySetting set = configData.getSetting(i);
                String pName = set.getPropertyName();
                String pValue = set.getPropertyValue();
                System.out.println("property name: " + pName);
                System.out.println("property value: " + pValue);
            }
            configData = core_.getConfigData("STORM", "STORM 638");
            System.out.println("STORM data 638");
            s = configData.size();
            for (int i=0; i<=s-1; i++){
                PropertySetting set = configData.getSetting(i);
                String pName = set.getPropertyName();
                String pValue = set.getPropertyValue();
                System.out.println("property name: " + pName);
                System.out.println("property value: " + pValue);
            }
                    
            /*SequenceSettings acqSet1 = gui_.acquisitions().getAcquisitionSettings();
            ArrayList<ChannelSpec> channels = acqSet1.channels;
            int s = channels.size();
            String[][] resArr = new String[s][7];
            for (int i=0; i<=s-1; i++){
                ChannelSpec ch1 = channels.get(i);
                String chh1 = ch1.config;
                String group = core_.getChannelGroup();
                Configuration configData = core_.getConfigData(group, chh1);
                long si = configData.size();
                //double roundOff = Math.round(((double) i+1.0)/(double) s * 100.0) / 100.0;
                resArr[i][0] = group;
                resArr[i][1] = chh1;
                for(int ii=0; ii<=si-1; ii++){
                    PropertySetting setting = configData.getSetting(ii);
                    String propertyValue = setting.getPropertyValue();
                    String propertyName = setting.getPropertyName();
                    String deviceName = setting.getDeviceLabel();
                    //System.out.println(deviceName+" "+propertyName+" "+propertyValue+" -> ??? STORM");
                    if("activationTime".equals(deviceName)){
                        resArr[i][2] = propertyValue;
                    } else if("activationPower".equals(deviceName)){
                        resArr[i][3] = propertyValue;
                    }else if(deviceName.contains("aser")){
                        if(Double.parseDouble(propertyValue)!=0){
                            resArr[i][4] = propertyValue;
                            resArr[i][5] = deviceName;
                            resArr[i][6] = propertyName;
                        } else {
                            //System.out.println("no STORM");
                        }
                    }else{
                        System.out.println("maybe: Could not find device name 'activationTime'"+deviceName+" "+propertyName+" "+propertyValue);
                        System.out.println("or maybe: Could not find device name 'activationPower'"+deviceName+" "+propertyName+" "+propertyValue);
                        break;
                    }
                }  
            }
            return arr;
        } catch (Exception ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }*/ 
        
    }
    
    void satyaStartSTORM(String[][] arr) {
        double aP = 0;
        double eP = 0;
        long aT = 0;
        int active = 0;
        String laserN = null;
        String propN = null;
        String chN = null;
        String groupN = null;
        
        // get number of colors and basic path
        int numCol = arr.length;
        SequenceSettings acqSet = gui_.getAcquisitionManager().getAcquisitionSettings();
        String mainPath = savePathField.getText();
        String expName = expFolderField.getText();
        String pathB = mainPath+"\\"+expName;
        
        for(int i=0; i<numCol; i++){
            active =(int) Double.parseDouble(arr[i][7]);
            if(active==1){
                // get parameters for specific color
                aP = Double.parseDouble(arr[i][3]);
                eP = Double.parseDouble(arr[i][4]);
                aT = (long) Double.parseDouble(arr[i][2]);
                laserN = arr[i][5];
                propN = arr[i][6];
                chN = arr[i][1];
                groupN = arr[i][0];
                System.out.println("Group name: " + groupN + " channel name: " + chN + " ch count: " + i);
                System.out.println("Laser name: " + laserN + " property name: " + propN + " excPow: " + eP + " actPow: " + aP + " actTimePow: " + aT);

                // set parameters
                try {
                    //gui_.shutter().setShutter(false);
                    System.out.println("Set: "+ laserN + " " + propN + " to " + aP);
                    core_.setProperty(laserN, propN, aP);
                    System.out.println("sleep for "+  aT);
                    TimeUnit.SECONDS.sleep(aT);
                    System.out.println("Set: "+ laserN + " " + propN + " to " + eP);
                    core_.setProperty(laserN, propN, eP);
                } catch (Exception ex) {
                    Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
                }

                String new_path = pathB + "\\" + chN;

                tcs_.takeTimeSeries(new_path);

                try {
                    core_.setProperty(laserN, propN, 0);
                } catch (Exception ex) {
                    Logger.getLogger(twoColSTORM.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        System.out.println("Finito");
    }
    
    public static void startMDA(){
        gui_.acquisitions().runAcquisition();
        gui_.acquisitions().clearRunnables();
    }
    
    private void autofocusTest_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autofocusTest_buttonActionPerformed
        System.out.println("Hello from India!");
 
    }//GEN-LAST:event_autofocusTest_buttonActionPerformed

    private void FredTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FredTestButtonActionPerformed
        //tcs_.takeTimeSeries();
        //String[][] p = tcs_.getMultiColSTORMdata();
        //tcs_.stormIt(p);
        tcs_.setFrameOfAF(Integer.parseInt(hcaAFfield.getText()));
        tcs_.setAF(afOnCheckBox.isSelected());
        tcs_.doXY();
    }//GEN-LAST:event_FredTestButtonActionPerformed

    private void afDefineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afDefineButtonActionPerformed
        try {
            afFoc = af_.defineAFFocus();
        } catch (InterruptedException ex) {
            Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(afFoc);
        realFoc = af_.defineRealFocus();
        System.out.println(realFoc);
    }//GEN-LAST:event_afDefineButtonActionPerformed

    private void afGoToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afGoToButtonActionPerformed
        af_.goToFocus();
        
    }//GEN-LAST:event_afGoToButtonActionPerformed

    private void afCalibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afCalibButtonActionPerformed
       //System.out.println(af_.checkAF(af_.readZfromTXT()));
       af_.calib(true);
    }//GEN-LAST:event_afCalibButtonActionPerformed

    private void lowerLimFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerLimFieldActionPerformed
        af_.setLowLim(Double.parseDouble(lowerLimField.getText()));
    }//GEN-LAST:event_lowerLimFieldActionPerformed

    private void zRangeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zRangeFieldActionPerformed
        af_.setZrange(Double.parseDouble(zRangeField.getText()));
    }//GEN-LAST:event_zRangeFieldActionPerformed

    private void zIncFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zIncFieldActionPerformed
        af_.setZInc(Double.parseDouble(zIncField.getText()));
    }//GEN-LAST:event_zIncFieldActionPerformed

    private void upperLimFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperLimFieldActionPerformed
        af_.setUpLim(Double.parseDouble(upperLimField.getText()));
    }//GEN-LAST:event_upperLimFieldActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        af_.iniSocket();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        af_.socketSent();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void saveCalibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCalibButtonActionPerformed
        af_.saveCalib();
    }//GEN-LAST:event_saveCalibButtonActionPerformed

    private void repCalibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repCalibButtonActionPerformed
        af_.repCalib(Double.parseDouble(repCalibField.getText()), (int) Double.parseDouble(waitRepField.getText()));
    }//GEN-LAST:event_repCalibButtonActionPerformed

    private void repCalibFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repCalibFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_repCalibFieldActionPerformed

    private void waitRepFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitRepFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waitRepFieldActionPerformed
    private void initSerialbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initSerialbuttonActionPerformed
     
    }//GEN-LAST:event_initSerialbuttonActionPerformed

    private void hcaAFbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hcaAFbuttonActionPerformed
        afIt = Integer.parseInt(hcaAFfield.getText());
        gui_.acquisitions().clearRunnables();
        runAcquThread = new Thread(new runAcquThread(this));
        //(int frame, int position, int channel, int slice, java.lang.Runnable runnable)
        acqSet = gui_.acquisitions().getAcquisitionSettings();
        frames = acqSet.numFrames;
        loopCount = frames/afIt;
        int num =0;
        gui_.acquisitions().attachRunnable(0, -1, 0, 0, afRun);
        for (int x = 1; x <= loopCount; x++) {
            gui_.acquisitions().attachRunnable(num, 0, 0, 0, afRun);
            num = num +afIt;
        } 
        runAcquThread.start();
    }//GEN-LAST:event_hcaAFbuttonActionPerformed

    private void repZstackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repZstackButtonActionPerformed
        int reps = Integer.parseInt(repZstackField.getText());
        System.out.println("repeat MDA");
        gui_.acquisitions().clearRunnables();
        for (int x = 1; x <= reps; x++) {
           runAcquThread = new Thread(new runAcquThread(this));
           runAcquThread.start(); 
           //Datastore dataStor;
           //dataStor = gui_.displays().getManagedDatastores();
           while(runAcquThread.isAlive()){};
           System.out.println(x + " finished");           
           //gui_.displays().closeDisplaysFor(dataStor);
           gui_.getDataManager().clearPipeline();
        } 
    }//GEN-LAST:event_repZstackButtonActionPerformed

    private void afOnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afOnCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_afOnCheckBoxActionPerformed

    private void frameNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frameNumberFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frameNumberFieldActionPerformed

    private void savePathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePathFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_savePathFieldActionPerformed

    public void satyaSetLasersOff(String[][] arr){
        double p = 0;
        String laserN = null;
        String propN = null;
        int s = arr.length;
        for(int i=0; i<s-1; i++){
            laserN = arr[i][5];
            propN = arr[i][6];
            try {
                core_.setProperty(laserN, propN, p);
            } catch (Exception ex) {
                Logger.getLogger(mainSTORM_frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void satyaStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_satyaStartActionPerformed
        System.out.println("Satya start STORM");
        satyaSetLasersOff(satyaGetSetings()); 
        satya2colThread = new Thread(new satyaThread(this));
        satya2colThread.start();
        while(satya2colThread.isAlive()){};
        System.out.println("Satya end STORM");
        satyaSetLasersOff(satyaGetSetings());        
    }//GEN-LAST:event_satyaStartActionPerformed

    public void setUpperLim(double upperLim) {
        upperLimField.setText(String.valueOf(upperLim));
    }

    public void setLowerLim(double lowerLim) {
        lowerLimField.setText(String.valueOf(lowerLim));
    }
    
    public static void autoFocusGo() throws InterruptedException{
        System.out.println("in Thread autofocus");
        
//        synchronized(runAcquThread){
//            System.out.println("sdgf");
//        }
//        try {
//                core_.setCameraDevice("Chameleon3 CM3-U3-31S4M");
//                //core_.setCameraDevice("DCam1");
//                Image image = gui_.live().snap(false).get(0);
//                core_.setCameraDevice("Grasshopper3 GS3-U3-23S6M");
//                //store = gui_.displays().show(image);
//            } catch (Exception ex) {
//                System.out.println("err 1");
//                //Logger.getLogger(mainMulitCamTest1_frame.class.getName()).log(Level.SEVERE, null, ex);
//            }
    }
    
 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainSTORM_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainSTORM_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainSTORM_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainSTORM_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainSTORM_frame(gui_).setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FredTestButton;
    private javax.swing.JLabel activationTime_label;
    private javax.swing.JButton afARButton;
    private javax.swing.JButton afCalibButton;
    private javax.swing.JButton afDefineButton;
    private javax.swing.JButton afGoToButton;
    private javax.swing.JButton afHCAstormButton;
    private javax.swing.JCheckBox afOnCheckBox;
    public javax.swing.JTextField afPathText;
    private javax.swing.JButton autofocusTest_button;
    private javax.swing.JTextField expFolderField;
    public javax.swing.JTextField frameNumberField;
    private javax.swing.JButton hcaAFbutton;
    private javax.swing.JTextField hcaAFfield;
    private javax.swing.JButton hcaSTORMbutton;
    private javax.swing.JButton initSerialbutton;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField lowerLimField;
    private javax.swing.JButton repCalibButton;
    private javax.swing.JTextField repCalibField;
    private javax.swing.JButton repZstackButton;
    private javax.swing.JTextField repZstackField;
    private javax.swing.JButton satyaStart;
    private javax.swing.JButton saveCalibButton;
    private javax.swing.JTextField savePathField;
    private javax.swing.JTextField upperLimField;
    private javax.swing.JTextField waitRepField;
    private javax.swing.JTextField zIncField;
    private javax.swing.JTextField zRangeField;
    // End of variables declaration//GEN-END:variables


}
